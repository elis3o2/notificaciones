# Generated by Django 5.1.7 on 2025-08-26 11:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Efector',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'db_table': 'efector',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EfectorPlantilla',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('confirmacion', models.IntegerField()),
                ('reprogramacion', models.IntegerField()),
                ('cancelacion', models.IntegerField()),
                ('recordatorio', models.IntegerField()),
            ],
            options={
                'db_table': 'efector_plantilla',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EfectorPlantillaCancelacion',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fecha_inicio', models.DateTimeField()),
                ('fecha_fin', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'efector_plantilla_cancelacion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EfectorPlantillaConfirmacion',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fecha_inicio', models.DateTimeField()),
                ('fecha_fin', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'efector_plantilla_confirmacion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EfectorPlantillaRecordatorio',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('horas_antes', models.IntegerField()),
                ('fecha_inicio', models.DateTimeField()),
                ('fecha_fin', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'efector_plantilla_recordatorio',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EfectorPlantillaReprogramacion',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fecha_inicio', models.DateTimeField()),
                ('fecha_fin', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'efector_plantilla_reprogramacion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Especialidad',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'db_table': 'especialidad',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EstadoMsj',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('significado', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'estado_msj',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EstadoTurno',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('nombre', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'estado_turno',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mensaje',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_mensaje', models.CharField(blank=True, max_length=40, null=True)),
                ('numero', models.CharField(max_length=20)),
                ('fecha_envio', models.DateTimeField()),
                ('fecha_last_ack', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mensaje',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Plantilla',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('contenido', models.TextField()),
            ],
            options={
                'db_table': 'plantilla',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Turno',
            fields=[
                ('id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('fecha_turno', models.DateTimeField()),
                ('msj_confirmado', models.BooleanField()),
                ('msj_reprogramado', models.BooleanField()),
                ('msj_cancelado', models.BooleanField()),
                ('msj_recordatorio', models.BooleanField()),
            ],
            options={
                'db_table': 'turno',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dni', models.CharField(max_length=15, null=True, unique=True)),
                ('efectores', models.ManyToManyField(blank=True, related_name='usuarios', to='src.efector')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
